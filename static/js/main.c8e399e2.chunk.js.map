{"version":3,"sources":["resources/data.js","components/Switch.js","App.js","serviceWorker.js","index.js"],"names":["data","sounds","keyCode","keyTrigger","id","url","Switch","react_default","a","createElement","className","type","checked","this","props","onChange","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","play","name","state","switchValue","setState","display","document","getElementById","onSwitch","volume","sliderValue","keyboardEvent","bind","assertThisInitialized","volumeChange","_this2","_this$state","power","Switch_Switch","label","min","max","value","map","sound","inx","key","disabled","onClick","muted","controls","src","event","filter","undefined","target","toString","addEventListener","removeEventListener","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8e399e2.chunk.js","sourcesContent":["const sounds = [\r\n {\r\n    keyCode: 81,\r\n    keyTrigger: 'Q',\r\n    id: 'Heater-1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n  }, {\r\n    keyCode: 87,\r\n    keyTrigger: 'W',\r\n    id: 'Heater-2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n  }, {\r\n    keyCode: 69,\r\n    keyTrigger: 'E',\r\n    id: 'Heater-3',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n  }, {\r\n    keyCode: 65,\r\n    keyTrigger: 'A',\r\n    id: 'Heater-4',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-4_1.mp3'\r\n  }, {\r\n    keyCode: 83,\r\n    keyTrigger: 'S',\r\n    id: 'Clap',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n  }, {\r\n    keyCode: 68,\r\n    keyTrigger: 'D',\r\n    id: 'Open-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n  }, {\r\n    keyCode: 90,\r\n    keyTrigger: 'Z',\r\n    id: \"Kick-n'-Hat\",\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n  }, {\r\n    keyCode: 88,\r\n    keyTrigger: 'X',\r\n    id: 'Kick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n  }, {\r\n    keyCode: 67,\r\n    keyTrigger: 'C',\r\n    id: 'Closed-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\r\n  },\r\n];\r\n\r\nexport default {\r\n    sounds: sounds\r\n}","import React, { Component } from 'react';\r\nimport '../style/App.css';\r\n\r\n// stateless Switch button component \r\nexport default class Switch extends Component {\r\n\r\n  render(){\r\n    return (\r\n      <label \r\n        className=\"switch\">\r\n        <input \r\n          type=\"checkbox\"\r\n          checked={this.props.checked}\r\n          onChange={this.props.onChange}\r\n        />\r\n        <span \r\n          className=\"slider\">\r\n        </span>\r\n      </label>\r\n    )\r\n  }\r\n}","import React, { Component } from 'react';\nimport data from './resources/data';\nimport Switch from './components/Switch';\nimport './style/App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      display: 'Press on these buttons below to play or on the keyboard',\n      volume: \"0.1\",\n      sliderValue: 50,\n      switchValue: true,\n    }\n    this.keyboardEvent = this.keyboardEvent.bind(this)\n    this.volumeChange = this.volumeChange.bind(this)\n    this.onSwitch = this.onSwitch.bind(this)\n  }\n\n  render() {\n    const sounds = data.sounds;\n    const {display, switchValue, sliderValue, power} = this.state;\n\n    return (\n      <div\n        id=\"drum-machine\" \n        className=\"App\">\n        <div\n          id=\"display\"\n          className=\"drums-controls-item\">\n          {display}\n        </div>\n        <div\n          className=\"drums-controls\">\n          <span\n            className=\"switch-container drums-controls-item\">\n            <Switch \n              label=\"Power\"\n              checked={switchValue}\n              onChange={this.onSwitch}\n            />\n            <span\n              className=\"switch-label\">\n              Power\n            </span>  \n          </span>\n          <input \n            type=\"range\" \n            min=\"0\" \n            max=\"100\" \n            value={sliderValue}\n            className=\"slider-range drums-controls-item\" \n            onChange={this.volumeChange}\n            id=\"myRange\"\n          />\n        </div>\n        <div\n          className=\"drums-container\">\n          {\n            sounds.map((sound, inx) => \n              <button \n                key={sound.id}\n                className=\"drum-pad\"\n                id={sound.id}\n                disabled={!switchValue}\n                onClick={() => this.play(sound.keyTrigger, sound.id)}>\n                {sound.keyTrigger}\n                <audio \n                  id={sound.keyTrigger}\n                  volume={this.state.volume}\n                  className=\"clip\"\n                  muted={!switchValue}\n                  controls>\n                  <source \n                    src={sound.url}\n                  />\n                </audio>\n              </button>\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n\n  keyboardEvent(event){\n    // find the object with keyCode equal to the pressed keyCode\n    var id = data.sounds.filter(sound => sound.keyCode === event.keyCode)   \n    if(id[0] !== undefined){\n      // call method play with found arguments\n      this.play(id[0].keyTrigger, id[0].id)\n    } \n  }\n\n  play = (id, name) => {\n    // display name of pressed key\n    if(this.state.switchValue){\n      this.setState({\n        display: name\n      })\n    }\n    else {\n      this.setState({\n        display: 'Power is Off'\n      })\n    }\n    // find element audio with keyCode == id and play it\n    document.getElementById(''+id+'').play()\n  }\n\n  volumeChange(event){\n    var volume = event.target.value/100;\n    this.setState({\n      volume: volume.toString(),\n      sliderValue: event.target.value,\n      display: 'Volume: '+event.target.value\n    })\n  }\n\n  onSwitch = () => {\n    if(!this.state.switchValue){\n      this.setState({\n        display: 'Power on'\n      })\n    }\n    this.setState({\n      switchValue: !this.state.switchValue\n    })\n  }\n\n  componentDidMount(){\n    // keyboard listener to trigger method - keyboardEvent when certain key is pressed\n    document.addEventListener(\"keydown\", this.keyboardEvent, false);      \n  }\n\n  componentWillUnmount(){\n    // remove listener when component is unmounting\n    document.removeEventListener(\"keydown\", this.keyboardEvent, false);  \n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}